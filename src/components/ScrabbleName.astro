---
/**
 * ScrabbleName Component
 * Displays "Clinton Langosch" as Scrabble tiles with drop-in animation
 */

export interface Props {
  animateOnLoad?: boolean;
  className?: string;
}

const { 
  animateOnLoad = true, 
  className = '' 
} = Astro.props;

// Scrabble letter values (for display only)
const letterValues: Record<string, number> = {
  'A': 1, 'E': 1, 'I': 1, 'L': 1, 'N': 1, 'O': 1, 'R': 1, 'S': 1, 'T': 1, 'U': 1,
  'D': 2, 'G': 2,
  'B': 3, 'C': 3, 'M': 3, 'P': 3,
  'F': 4, 'H': 4, 'V': 4, 'W': 4, 'Y': 4,
  'K': 5,
  'J': 8, 'X': 8,
  'Q': 10, 'Z': 10
};

// Names to display
const firstName = 'CLINTON';
const lastName = 'LANGOSCH';
---

<div class={`scrabble-name ${className}`}>
  <!-- First Name Rack -->
  <div class="scrabble-rack mb-4">
    <div class="flex gap-1 sm:gap-2 justify-center">
      {firstName.split('').map((letter, index) => (
        <div 
          class="scrabble-tile opacity-0"
          data-letter={letter}
          data-delay={index * 150}
        >
          <div class="tile-inner">
            <span class="letter">{letter}</span>
            <span class="points">{letterValues[letter]}</span>
          </div>
        </div>
      ))}
    </div>
  </div>

  <!-- Last Name Rack -->
  <div class="scrabble-rack">
    <div class="flex gap-1 sm:gap-2 justify-center">
      {lastName.split('').map((letter, index) => (
        <div 
          class="scrabble-tile opacity-0"
          data-letter={letter}
          data-delay={(firstName.length * 150) + 300 + (index * 150)}
        >
          <div class="tile-inner">
            <span class="letter">{letter}</span>
            <span class="points">{letterValues[letter]}</span>
          </div>
        </div>
      ))}
    </div>
  </div>
</div>

<style>
  .scrabble-name {
    @apply text-center py-6;
  }

  .scrabble-tile {
    @apply relative;
    animation-fill-mode: both;
  }

  .tile-inner {
    @apply relative bg-amber-50 border-2 border-amber-200 rounded-lg shadow-md;
    @apply w-12 h-12 sm:w-16 sm:h-16 flex items-center justify-center;
    @apply transform transition-all duration-200 hover:scale-105 hover:shadow-lg;
    background: linear-gradient(135deg, #fffbeb 0%, #fef3c7 100%);
  }

  .letter {
    @apply text-lg sm:text-2xl font-bold text-amber-900;
    font-family: 'Georgia', serif;
  }

  .points {
    @apply text-xs font-semibold text-amber-700 absolute bottom-0.5 right-1;
  }

  /* Animation keyframes */
  @keyframes dropIn {
    0% {
      transform: translateY(-30px) scale(0.8);
      opacity: 0;
    }
    60% {
      transform: translateY(5px) scale(1.05);
      opacity: 1;
    }
    100% {
      transform: translateY(0) scale(1);
      opacity: 1;
    }
  }

  .tile-animate {
    animation: dropIn 0.6s ease-out both;
  }

  /* Respect reduced motion preference */
  @media (prefers-reduced-motion: reduce) {
    .scrabble-tile {
      animation: none !important;
      opacity: 1 !important;
    }
    
    .tile-inner {
      transition: none !important;
    }
  }
</style>

<script is:inline>
  // Use is:inline to ensure this runs immediately
  function initScrabbleAnimation() {
    const scrabbleName = document.querySelector('.scrabble-name');
    if (!scrabbleName) {
      // Try again in a moment if component isn't ready
      setTimeout(initScrabbleAnimation, 100);
      return;
    }

    console.log('ScrabbleName found, initializing animation');

    // Respect user's motion preferences
    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
    if (prefersReducedMotion) {
      console.log('Reduced motion detected, showing tiles immediately');
      const hiddenElements = scrabbleName.querySelectorAll('.opacity-0');
      hiddenElements.forEach(el => el.classList.remove('opacity-0'));
      return;
    }

    // Animation function
    function animateScrabbleName() {
      console.log('Starting Scrabble animation');
      
      // Animate tiles
      const tiles = scrabbleName.querySelectorAll('.scrabble-tile');
      console.log('Found', tiles.length, 'tiles to animate');
      
      tiles.forEach((tile, index) => {
        const delay = parseInt(tile.dataset.delay || '0');
        console.log('Animating tile', index, 'with delay', delay);
        
        setTimeout(() => {
          tile.classList.remove('opacity-0');
          tile.classList.add('tile-animate');
        }, delay);
      });
    }

    // Start animation immediately for testing
    setTimeout(animateScrabbleName, 500);
  }

  // Start when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initScrabbleAnimation);
  } else {
    initScrabbleAnimation();
  }
</script>