---
/**
 * Button Component
 * Reusable button with multiple variants and sizes
 */
import { getButtonStyles, cn } from '../utils/styles';
import Icon from './Icon.astro';

export interface Props {
  variant?: 'primary' | 'secondary' | 'ghost' | 'link' | 'outline';
  size?: 'sm' | 'md' | 'lg';
  href?: string;
  external?: boolean;
  target?: string;
  rel?: string;
  className?: string;
  disabled?: boolean;
  icon?: string;
  iconPosition?: 'left' | 'right';
}

const { 
  variant = 'primary',
  size = 'md',
  href,
  external = false,
  target = external ? '_blank' : undefined,
  rel = external ? 'noopener noreferrer' : undefined,
  className = '',
  disabled = false,
  icon,
  iconPosition = 'left',
  ...props 
} = Astro.props;

const sizeClasses = {
  sm: 'px-3 py-1.5 text-sm',
  md: 'px-4 py-2 text-base',
  lg: 'px-6 py-3 text-lg'
};

const variantClasses = {
  primary: 'bg-accent-blue text-white hover:bg-blue-600 border-2 border-accent-blue',
  secondary: 'bg-dark-card text-accent-blue border-2 border-accent-blue hover:bg-accent-blue hover:text-white',
  ghost: 'bg-transparent text-text-primary hover:bg-dark-layer border-2 border-transparent',
  link: 'bg-transparent text-accent-blue hover:text-blue-400 underline border-none p-0',
  outline: 'bg-transparent text-text-secondary hover:text-accent-blue border border-dark-border hover:border-accent-blue'
};

const baseClasses = 'inline-flex items-center justify-center font-medium rounded-md transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-accent-blue focus:ring-offset-2 focus:ring-offset-dark-base';

const buttonClasses = cn(
  baseClasses,
  sizeClasses[size],
  variantClasses[variant],
  disabled && 'opacity-50 cursor-not-allowed',
  className
);

const Element = href ? 'a' : 'button';

const iconSizes = {
  sm: '16',
  md: '20',
  lg: '24'
};

const iconSpacing = {
  sm: 'mr-1.5',
  md: 'mr-2',
  lg: 'mr-2.5'
};

const iconSpacingRight = {
  sm: 'ml-1.5',
  md: 'ml-2',
  lg: 'ml-2.5'
};
---

<Element
  class={buttonClasses}
  href={href}
  target={target}
  rel={rel}
  disabled={disabled}
  {...props}
>
  {icon && iconPosition === 'left' && (
    <Icon name={icon} size={iconSizes[size]} class={iconSpacing[size]} />
  )}
  <slot />
  {icon && iconPosition === 'right' && (
    <Icon name={icon} size={iconSizes[size]} class={iconSpacingRight[size]} />
  )}
</Element>