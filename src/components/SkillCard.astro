---
/**
 * SkillCard Component
 * Displays a skill with all its metadata
 */
import LevelBadge from './LevelBadge.astro';
import Icon from './Icon.astro';

export interface Props {
  skill: {
    name: string;
    level: string;
    rating: number;
    yearsOfExperience?: number;
    tags?: string[];
    focus?: string[];
    iconName?: string | null;
  };
  variant?: 'grid' | 'list';
  className?: string;
}

const { skill, variant = 'grid', className = '' } = Astro.props;

// Determine icon name with fallbacks:
// 1. Use skill.iconName if provided
// 2. Try skill.name for custom icons (like "JavaScript")
// 3. Fall back to "code" for angle brackets
const iconName = skill.iconName || skill.name || "code";

// Grid variant: vertical card layout
// List variant: horizontal layout for category view
const baseClasses = variant === 'grid' 
  ? 'bg-dark-card border border-dark-border rounded-lg p-4 hover:shadow-lg hover:-translate-y-0.5 hover:bg-dark-hover transition-all duration-200'
  : 'bg-dark-card border border-dark-border rounded-lg px-4 py-3 hover:shadow-md hover:bg-dark-hover transition-shadow';

const layoutClasses = variant === 'list' 
  ? 'flex justify-between items-center' 
  : '';
---

<div 
  class={`skill-card ${baseClasses} ${layoutClasses} ${className}`}
  data-focus={skill.focus?.join(' ')} 
  data-categories={skill.tags?.join(' ')}
  data-level={skill.level}
  data-name={skill.name}
>
  {variant === 'grid' ? (
    <>
      <!-- Grid Layout -->
      <div class="flex justify-between items-start mb-3">
        <div class="flex items-center gap-2">
          <Icon name={iconName} class="text-text-muted" />
          <h3 class="text-lg font-semibold text-text-primary">{skill.name}</h3>
        </div>
        <LevelBadge level={skill.level} />
      </div>
      
      <div class="flex flex-wrap justify-between items-center gap-2 mt-3">
        {skill.yearsOfExperience && (
          <span class="text-xs bg-dark-hover text-text-secondary px-2 py-1 rounded">
            {skill.yearsOfExperience} year{skill.yearsOfExperience !== 1 ? 's' : ''}
          </span>
        )}
        
        {skill.tags && skill.tags.length > 0 && (
          <div class="flex flex-wrap gap-1">
            {skill.tags.slice(0, 2).map(tag => (
              <span class="text-xs bg-dark-hover text-text-secondary px-2 py-1 rounded">
                {tag}
              </span>
            ))}
          </div>
        )}
      </div>
    </>
  ) : (
    <>
      <!-- List Layout -->
      <div class="flex items-center gap-3">
        <div class="flex items-center gap-2">
          <Icon name={iconName}  class="text-text-muted" />
          <span class="font-medium text-text-primary">{skill.name}</span>
        </div>
        <LevelBadge level={skill.level} />
      </div>
      
      {skill.yearsOfExperience && (
        <div class="flex items-center gap-3">
          <span class="text-xs text-text-muted">
            {skill.yearsOfExperience}yr{skill.yearsOfExperience !== 1 ? 's' : ''}
          </span>
        </div>
      )}
    </>
  )}
</div>
